<?php
/**
 * @author Kuziv Alexander <phpdevops@gmail.com>
 *
 **/

/**
 * Задание:
 *
 * Товары на сайт интернет-магазина сгруппированы по категориям. Категории организованы в древовидную структуру с уровнем
 * вложенности до 4 включительно. Значимые атрибуты категории: название. Значимые атрибуты товара: название и цена.
 * Один продукт может относиться к нескольким категориям.
 * 1. Разработать структуру базы данных MySQL для хранения дерева категорий, списка продуктов и информации о
 *          принадлежности продуктов к категориям.
 * 2. Заполнить таблицы тестовыми данными.
 * 3. Написать SQL-запросы для получения следующих данных:
 * a. Для заданного списка товаров получить названия всех категорий, в которых представлены товары;
 * b. Для заданной категории получить список предложений всех товаров из этой категории и ее дочерних категорий;
 * c. Для заданного списка категорий получить количество предложений товаров в каждой категории;
 * d. Для заданного списка категорий получить общее количество уникальных предложений товара;
 * e. Для заданной категории получить ее полный путь в дереве (breadcrumb, «хлебные крошки»).
 * 4. Проверить и обосновать оптимальность запросов.
 **/

/**
//  Решение:
// 1.
CREATE DATABASE `popopo` CHARACTER SET utf8 COLLATE utf8_general_ci;

CREATE TABLE IF NOT EXISTS `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) NOT NULL DEFAULT '0',
  `title` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Table with category' AUTO_INCREMENT=1;

alter table `category` add column `left` int(11) default null;
alter table `category` add column `right` int(11) default null;
alter table `category` add column `level` int(11) default null;

CREATE TABLE IF NOT EXISTS `product` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `price` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Table with product' AUTO_INCREMENT=1;

CREATE TABLE IF NOT EXISTS `product_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `product_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Table with category_product' AUTO_INCREMENT=1;

// 2.
INSERT INTO `category` SET id=1, parent_id=0, title="Category 1"; // 1 (ID products)
INSERT INTO `category` SET id=2, parent_id=0, title="Category 2";
INSERT INTO `category` SET id=3, parent_id=0, title="Category 3";
INSERT INTO `category` SET id=4, parent_id=0, title="Category 4";
INSERT INTO `category` SET id=5, parent_id=1, title="Category 1.1"; // 1
INSERT INTO `category` SET id=6, parent_id=1, title="Category 1.2"; // 1
INSERT INTO `category` SET id=7, parent_id=2, title="Category 2.1"; // 1, 2, 5, 1
INSERT INTO `category` SET id=8, parent_id=2, title="Category 2.2"; // 1, 2
INSERT INTO `category` SET id=9, parent_id=4, title="Category 4.1";
INSERT INTO `category` SET id=10, parent_id=5, title="Category 1.1.1"; // 3
INSERT INTO `category` SET id=11, parent_id=10, title="Category 1.1.1.1"; // 4
INSERT INTO `category` SET id=12, parent_id=7, title="Category 2.1.1"; // 5

INSERT INTO `product` SET id=1, title="Product 1", price="10";
INSERT INTO `product` SET id=2, title="Product 2", price="11";
INSERT INTO `product` SET id=3, title="Product 3", price="12";
INSERT INTO `product` SET id=4, title="Product 4", price="140";
INSERT INTO `product` SET id=5, title="Product 5", price="5";

INSERT INTO `product_category` SET product_id=1, category_id=1;
INSERT INTO `product_category` SET product_id=1, category_id=5;
INSERT INTO `product_category` SET product_id=1, category_id=6;
INSERT INTO `product_category` SET product_id=1, category_id=7;
INSERT INTO `product_category` SET product_id=1, category_id=8;
INSERT INTO `product_category` SET product_id=2, category_id=7;
INSERT INTO `product_category` SET product_id=2, category_id=8;
INSERT INTO `product_category` SET product_id=3, category_id=10;
INSERT INTO `product_category` SET product_id=4, category_id=11;
INSERT INTO `product_category` SET product_id=5, category_id=12;
INSERT INTO `product_category` SET product_id=5, category_id=7;
INSERT INTO `product_category` SET product_id=2, category_id=7;

// 3.
// a
SELECT c.title FROM product_category pc LEFT JOIN category c ON (pc.category_id = c.id) WHERE pc.product_id IN (1,2);

// b
DELIMITER $$
DROP PROCEDURE IF EXISTS products_branch$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE products_branch(IN CatID INT)
BEGIN
    SET @LeftK = 0;
    SET @RightK = 0;

    SELECT `leftk`  into @LeftK  FROM `category` WHERE id = CatID;
    SELECT `rightk` into @RightK FROM `category` WHERE id = CatID;

    SELECT pc.id, p.* FROM category c LEFT JOIN product_category pc ON (c.id=pc.category_id)
    LEFT JOIN product p ON (pc.product_id=p.id)
    WHERE c.id IN (
        SELECT cat.id FROM `category` cat WHERE cat.`leftk` >= @leftK AND cat.`rightk` <= @rightK
    );
END$$
CALL products_branch(1); -- указать ID категории

// c
SELECT c.id, c.title, count(p.id) as count_products FROM category c LEFT JOIN product_category pc ON (c.id=pc.category_id)
LEFT JOIN product p ON (pc.product_id=p.id)
WHERE c.id IN (1,5,7,8) GROUP BY c.id;

SELECT pc.id, p.*, c.id, c.title FROM category c LEFT JOIN product_category pc ON (c.id=pc.category_id)
LEFT JOIN product p ON (pc.product_id=p.id)
WHERE c.id IN (1,5,7,8);

// d
SELECT c.id, c.title, count( DISTINCT p.id ) as count_products FROM category c LEFT JOIN product_category pc ON (c.id=pc.category_id)
LEFT JOIN product p ON (pc.product_id=p.id)
WHERE c.id IN (1,5,7,8) GROUP BY c.id;

SELECT DISTINCT pc.id, p.*, c.id, c.title FROM category c LEFT JOIN product_category pc ON (c.id=pc.category_id)
LEFT JOIN product p ON (pc.product_id=p.id)
WHERE c.id IN (1,5,7,8);

// e
DELIMITER $$
DROP PROCEDURE IF EXISTS products_breadcrumb$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE products_breadcrumb(IN CatID INT)
BEGIN
    SET @Left_K = 0;
    SET @Right_K = 0;

    SELECT `leftk`  into @Left_K  FROM `category` WHERE id = CatID;
    SELECT `rightk` into @Right_K FROM `category` WHERE id = CatID;

    SELECT c.* FROM category c LEFT JOIN product_category pc ON (c.id=pc.category_id)
    LEFT JOIN product p ON (pc.product_id=p.id)
    WHERE c.id IN (
        SELECT cat.id FROM `category` cat WHERE cat.`leftk` <= @Left_K AND cat.`rightk` >= @Right_K ORDER BY leftk
    );
END$$
CALL products_breadcrumb(11); -- указать ID категории

// 4.
//   Выборка из дерева (баз данных не поддерживающих рекурсивные запросы) происходит быстрее, чем если бы она делалась
//   с помощью процедуры (нескольких однотипных запросов с LEFT JOIN  и т.д.)

// Дополнительные задания
// Задание 1
highlight_file(__FILE__);

// Задание 2
// это долго, лень ))


// Иерархия
// Вложенное множество (дерево или иерархия) в реляционной базе данных
DELIMITER $$
DROP PROCEDURE IF EXISTS refresh_nested_set$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE refresh_nested_set()
BEGIN
    -- Изначально сбрасываем все границы
    UPDATE `category` SET `level` = 0, `leftk` = 0, `rightk` = 0;

    -- Устанавливаем границы корневым элементам
    SET @i := 0;
    UPDATE category SET leftk = (@i := @i + 1), rightk = (@i := @i + 1) WHERE parent_id = 0;

    SET @parent_id := NULL;
    SET @parent_right := NULL;
    forever: LOOP
        -- Находим элемент с минимальной правой границей - самый левый в дереве
        SET @parent_id := NULL;

        SELECT t.`id`, t.`rightk` INTO @parent_id, @parent_right FROM `category` t, `category` tc
        WHERE t.`id` = tc.`parent_id` AND tc.`leftk` = 0 AND t.`rightk` <> 0 ORDER BY t.`rightk`, t.`id` LIMIT 1;

        -- Выходим из бесконечности, когда у нас уже нет незаполненных элементов
        IF @parent_id IS NULL THEN
            LEAVE forever;
        END IF;

        -- Сохраняем левую границу текущего ряда
        SET @current_left := @parent_right;
        -- Вычисляем максимальную правую границу текущего ряда
        SELECT ( @current_left + COUNT(*) ) * 2 FROM `category` WHERE `parent_id` = @parent_id INTO @parent_right;

        -- Вычисляем длину текущего ряда
        SET @current_length := @parent_right - @current_left;

        -- Обновляем правые границы всех элементов, которые правее
        UPDATE `category` SET `rightk` = `rightk` + @current_length WHERE `rightk` >= @current_left ORDER BY `rightk`;
        -- Обновляем левые границы всех элементов, которые правее
        UPDATE `category` SET `leftk` = `leftk` + @current_length WHERE `leftk` > @current_left ORDER BY leftk;
        -- И только сейчас обновляем границы текущего ряда
        SET @i := @current_left - 1;
        UPDATE `category` SET `leftk` = (@i := @i + 1), `rightk` = (@i := @i + 1) WHERE `parent_id` = @parent_id ORDER BY `id`;
    END LOOP;

    -- Дальше заполняем поля level
    -- Устанавливаем 1-й уровень всем корневым категориям классификатора
    UPDATE `category` SET `level` = 1 WHERE `parent_id` IS NULL OR `parent_id` = 0;
    SET @unprocessed_rows_count = 100500;
    WHILE @unprocessed_rows_count > 0 DO
        UPDATE `category` top, `category` bottom SET bottom.`level` = top.`level` + 1
        WHERE bottom.`level` = 0 AND top.`level` <> 0 AND top.`id` = bottom.`parent_id`;

        SELECT COUNT(*) FROM `category` WHERE `level` = 0 LIMIT 1 INTO @unprocessed_rows_count;
    END WHILE;
END$$

CALL refresh_nested_set();
*/
